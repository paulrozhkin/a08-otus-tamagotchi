version: '3.4'

services:

  elasticsearch:
   container_name: elasticsearch
   image: docker.elastic.co/elasticsearch/elasticsearch:7.9.2
   ports:
    - 9200:9200
   volumes:
    - elasticsearch-data:/usr/share/elasticsearch/data
   environment:
    - xpack.monitoring.enabled=true
    - xpack.watcher.enabled=false
    - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    - discovery.type=single-node

  kibana:
   container_name: kibana
   image: docker.elastic.co/kibana/kibana:7.9.2
   ports:
    - 5601:5601
   depends_on:
    - elasticsearch
   environment:
    - ELASTICSEARCH_URL=http://elasticsearch

  pgadmin:
    image: dpage/pgadmin4
    
  postgres:
    image: postgres    

  rabbitmq:
    image: rabbitmq:3-management-alpine

  redis:
    image: "redis:alpine"

  web.httpaggregator:
    image: ${DOCKER_REGISTRY-}webhttpaggregator
    build:
      context: .
      dockerfile: ApiGateways/Web.HttpAggregator/aggregator/Web.HttpAggregator/Dockerfile
    depends_on:
      - rabbitmq
      - elasticsearch
      - minio

  orderqueue.api:
    image: ${DOCKER_REGISTRY-}orderqueueapi
    build:
      context: .
      dockerfile: Services/OrderQueue/OrderQueue.API/Dockerfile
    depends_on:
      - rabbitmq
      - postgres

  orders.api:
    image: ${DOCKER_REGISTRY-}ordersapi
    build:
      context: .
      dockerfile: Services/Orders/Orders.API/Dockerfile
    depends_on:
      - rabbitmq

  restaurants.api:
    image: ${DOCKER_REGISTRY-}restaurantsapi
    build:
      context: .
      dockerfile: Services/Restaurants/Restaurants.API/Dockerfile
    depends_on: 
      - postgres
      - geocoding.api

  menu.api:
    image: ${DOCKER_REGISTRY-}menuapi
    build:
      context: .
      dockerfile: Services/Menu/Menu.API/Dockerfile
    depends_on:
      - postgres

  tables.api:
    image: ${DOCKER_REGISTRY-}tablesapi
    build:
      context: .
      dockerfile: Services/Tables/Tables.API/Dockerfile
    depends_on:
      - postgres

  users.api:
    image: ${DOCKER_REGISTRY-}usersapi
    build:
      context: .
      dockerfile: Services/Users/Users.API/Dockerfile
    depends_on:
      - postgres

  geocoding.api:
    image: ${DOCKER_REGISTRY-}geocodingapi
    build:
      context: .
      dockerfile: Services/Geocoding/Geocoding.API/Dockerfile
    depends_on:
      - redis
  
  management.ui:
    image: ${DOCKER_REGISTRY-}managementui
    build:
      context: ../web/restaurant-management/
      dockerfile: Dockerfile
    depends_on:
      - web.httpaggregator

  orders.ui:
    image: ${DOCKER_REGISTRY-}ordersui
    build:
      context: ../web/orders-app/
      dockerfile: Dockerfile
    depends_on:
      - web.httpaggregator

  restaurant.ui:
    image: ${DOCKER_REGISTRY-}restaurantui
    build:
      context: ../web/restaurant-service/
      dockerfile: Dockerfile
    depends_on:
      - web.httpaggregator

  minio:
    image: quay.io/minio/minio:RELEASE.2021-11-24T23-19-33Z
    command: server /data
    expose:
    - "9000"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio_password
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  resources.api:
    image: ${DOCKER_REGISTRY-}resourcessapi
    build:
      context: .
      dockerfile: Services/Resources/Resources.API/Dockerfile
    depends_on:
      - mongo
      - minio
      - rabbitmq

  mongo:
    image: mongo
    restart: always

  mongo-express:
    image: mongo-express
    restart: always
    depends_on:
      - mongo
    
volumes:
  elasticsearch-data:
  postgres:  
  pgadmin_data:
  minio_data:
  mongo_data: